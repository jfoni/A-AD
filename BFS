#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

int main()
{
    int node,edge,start_node;
    cout << "Enter the number of nodes: ";
    cin >> node;
    cout << "Enter the number of edges: ";
    cin >> edge;

    bool visit[node+1];
    vector<int> adj[node+1];

    cout << "Enter each edge : " <<endl;
    for(int i=0; i<edge; i++)
    {
        int a,b;
        cin >> a >> b;
        adj[b].push_back(a);
        adj[a].push_back(b);
    }

    cout << "\nAdjacency List: " <<endl;
    for(int i=1; i<=node; i++)
    {
        cout << i << " -> ";
        for(int j=0; j<adj[i].size(); j++)
        {
            cout << adj[i][j] << " ";
        }
        cout <<endl;
    }

    cout << "Enter the staring node: " <<endl;
    cin >> start_node;

    for(int i=0; i<=node; i++)
    {
        visit[i]=false;
    }

    queue<int> q;
    q.push(start_node);
    visit[start_node]=true;

    vector<int> bfs_result;

    while(!q.empty())
    {
        int fr=q.front();
        q.pop();
        bfs_result.push_back(fr);

        for(int i=0; i<adj[fr].size(); i++)
        {
            int next=adj[fr][i];
            if(!visit[next])
            {
                visit[next]=true;
                q.push(next);
            }
        }
    }

    cout <<"\nBFS Traversal Order: ";
    for(int i=0; i<bfs_result.size(); i++)
    {
        cout << bfs_result[i] << " ";
    }
    cout <<endl;

    int total_deg=0;
    for(int i=1; i<=node; i++)
    {
        total_deg+=adj[i].size();
    }
    double avg=(double)total_deg / node;

    cout << "Average: " <<avg <<endl;
}
